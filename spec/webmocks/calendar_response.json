{
  "protocol": "rest",
  "ownerName": "Google",
  "batchPath": "batch",
  "id": "calendar:v3",
  "schemas": {
    "EventAttachment": {
      "type": "object",
      "id": "EventAttachment",
      "properties": {
        "mimeType": {
          "type": "string",
          "description": "Internet media type (MIME type) of the attachment."
        },
        "title": {
          "type": "string",
          "description": "Attachment title."
        },
        "fileUrl": {
          "type": "string",
          "description": "URL link to the attachment.\nFor adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.",
          "annotations": {
            "required": [
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          }
        },
        "iconLink": {
          "type": "string",
          "description": "URL link to the attachment's icon. Read-only."
        },
        "fileId": {
          "type": "string",
          "description": "ID of the attached file. Read-only.\nFor Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API."
        }
      }
    },
    "CalendarListEntry": {
      "type": "object",
      "id": "CalendarListEntry",
      "properties": {
        "kind": {
          "default": "calendar#calendarListEntry",
          "type": "string",
          "description": "Type of the resource (\"calendar#calendarListEntry\")."
        },
        "foregroundColor": {
          "type": "string",
          "description": "The foreground color of the calendar in the hexadecimal format \"#ffffff\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional."
        },
        "defaultReminders": {
          "items": {
            "$ref": "EventReminder"
          },
          "type": "array",
          "description": "The default reminders that the authenticated user has for this calendar."
        },
        "description": {
          "type": "string",
          "description": "Description of the calendar. Optional. Read-only."
        },
        "deleted": {
          "default": "false",
          "type": "boolean",
          "description": "Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False."
        },
        "colorId": {
          "type": "string",
          "description": "The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional."
        },
        "selected": {
          "default": "false",
          "type": "boolean",
          "description": "Whether the calendar content shows up in the calendar UI. Optional. The default is False."
        },
        "notificationSettings": {
          "type": "object",
          "description": "The notifications that the authenticated user is receiving for this calendar.",
          "properties": {
            "notifications": {
              "items": {
                "$ref": "CalendarNotification"
              },
              "type": "array",
              "description": "The list of notifications set for this calendar."
            }
          }
        },
        "primary": {
          "default": "false",
          "type": "boolean",
          "description": "Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "location": {
          "type": "string",
          "description": "Geographic location of the calendar as free-form text. Optional. Read-only."
        },
        "backgroundColor": {
          "type": "string",
          "description": "The main color of the calendar in the hexadecimal format \"#0088aa\". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional."
        },
        "summaryOverride": {
          "type": "string",
          "description": "The summary that the authenticated user has set for this calendar. Optional."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone of the calendar. Optional. Read-only."
        },
        "hidden": {
          "default": "false",
          "type": "boolean",
          "description": "Whether the calendar has been hidden from the list. Optional. The default is False."
        },
        "summary": {
          "type": "string",
          "description": "Title of the calendar. Read-only."
        },
        "accessRole": {
          "type": "string",
          "description": "The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the calendar.",
          "annotations": {
            "required": [
              "calendar.calendarList.insert"
            ]
          }
        }
      }
    },
    "ColorDefinition": {
      "type": "object",
      "id": "ColorDefinition",
      "properties": {
        "foreground": {
          "type": "string",
          "description": "The foreground color that can be used to write on top of a background with 'background' color."
        },
        "background": {
          "type": "string",
          "description": "The background color associated with this color definition."
        }
      }
    },
    "EventDateTime": {
      "type": "object",
      "id": "EventDateTime",
      "properties": {
        "date": {
          "type": "string",
          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
          "format": "date"
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end."
        },
        "dateTime": {
          "type": "string",
          "description": "The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone.",
          "format": "date-time"
        }
      }
    },
    "Setting": {
      "type": "object",
      "id": "Setting",
      "properties": {
        "kind": {
          "default": "calendar#setting",
          "type": "string",
          "description": "Type of the resource (\"calendar#setting\")."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "id": {
          "type": "string",
          "description": "The id of the user setting."
        },
        "value": {
          "type": "string",
          "description": "Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters."
        }
      }
    },
    "Events": {
      "type": "object",
      "id": "Events",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "kind": {
          "default": "calendar#events",
          "type": "string",
          "description": "Type of the collection (\"calendar#events\")."
        },
        "defaultReminders": {
          "items": {
            "$ref": "EventReminder"
          },
          "type": "array",
          "description": "The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True)."
        },
        "description": {
          "type": "string",
          "description": "Description of the calendar. Read-only."
        },
        "items": {
          "items": {
            "$ref": "Event"
          },
          "type": "array",
          "description": "List of events on the calendar."
        },
        "updated": {
          "type": "string",
          "description": "Last modification time of the calendar (as a RFC3339 timestamp). Read-only.",
          "format": "date-time"
        },
        "summary": {
          "type": "string",
          "description": "Title of the calendar. Read-only."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the collection."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone of the calendar. Read-only."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided."
        },
        "accessRole": {
          "type": "string",
          "description": "The user's access role for this calendar. Read-only. Possible values are:  \n- \"none\" - The user has no access. \n- \"freeBusyReader\" - The user has read access to free/busy information. \n- \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs."
        }
      }
    },
    "Channel": {
      "type": "object",
      "id": "Channel",
      "properties": {
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "kind": {
          "default": "api#channel",
          "type": "string",
          "description": "Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string \"api#channel\"."
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        },
        "params": {
          "additionalProperties": {
            "type": "string",
            "description": "Declares a new parameter by name."
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "expiration": {
          "type": "string",
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64"
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        }
      }
    },
    "EventAttendee": {
      "type": "object",
      "id": "EventAttendee",
      "properties": {
        "comment": {
          "type": "string",
          "description": "The attendee's response comment. Optional."
        },
        "displayName": {
          "type": "string",
          "description": "The attendee's name, if available. Optional."
        },
        "responseStatus": {
          "type": "string",
          "description": "The attendee's response status. Possible values are:  \n- \"needsAction\" - The attendee has not responded to the invitation. \n- \"declined\" - The attendee has declined the invitation. \n- \"tentative\" - The attendee has tentatively accepted the invitation. \n- \"accepted\" - The attendee has accepted the invitation."
        },
        "self": {
          "default": "false",
          "type": "boolean",
          "description": "Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False."
        },
        "id": {
          "type": "string",
          "description": "The attendee's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API"
        },
        "additionalGuests": {
          "default": "0",
          "type": "integer",
          "description": "Number of additional guests. Optional. The default is 0.",
          "format": "int32"
        },
        "resource": {
          "default": "false",
          "type": "boolean",
          "description": "Whether the attendee is a resource. Read-only. The default is False."
        },
        "organizer": {
          "type": "boolean",
          "description": "Whether the attendee is the organizer of the event. Read-only. The default is False."
        },
        "optional": {
          "default": "false",
          "type": "boolean",
          "description": "Whether this is an optional attendee. Optional. The default is False."
        },
        "email": {
          "type": "string",
          "description": "The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.",
          "annotations": {
            "required": [
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          }
        }
      }
    },
    "CalendarList": {
      "type": "object",
      "id": "CalendarList",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "items": {
          "items": {
            "$ref": "CalendarListEntry"
          },
          "type": "array",
          "description": "Calendars that are present on the user's calendar list."
        },
        "kind": {
          "default": "calendar#calendarList",
          "type": "string",
          "description": "Type of the collection (\"calendar#calendarList\")."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the collection."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided."
        }
      }
    },
    "EventReminder": {
      "type": "object",
      "id": "EventReminder",
      "properties": {
        "minutes": {
          "annotations": {
            "required": [
              "calendar.calendarList.insert",
              "calendar.calendarList.update",
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          },
          "type": "integer",
          "description": "Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).",
          "format": "int32"
        },
        "method": {
          "type": "string",
          "description": "The method used by this reminder. Possible values are:  \n- \"email\" - Reminders are sent via email. \n- \"sms\" - Reminders are sent via SMS. These are only available for Google Apps for Work, Education, and Government customers. Requests to set SMS reminders for other account types are ignored. \n- \"popup\" - Reminders are sent via a UI popup.",
          "annotations": {
            "required": [
              "calendar.calendarList.insert",
              "calendar.calendarList.update",
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          }
        }
      }
    },
    "TimePeriod": {
      "type": "object",
      "id": "TimePeriod",
      "properties": {
        "start": {
          "type": "string",
          "description": "The (inclusive) start of the time period.",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "description": "The (exclusive) end of the time period.",
          "format": "date-time"
        }
      }
    },
    "FreeBusyGroup": {
      "type": "object",
      "id": "FreeBusyGroup",
      "properties": {
        "errors": {
          "items": {
            "$ref": "Error"
          },
          "type": "array",
          "description": "Optional error(s) (if computation for the group failed)."
        },
        "calendars": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of calendars' identifiers within a group."
        }
      }
    },
    "Settings": {
      "type": "object",
      "id": "Settings",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "items": {
          "items": {
            "$ref": "Setting"
          },
          "type": "array",
          "description": "List of user settings."
        },
        "kind": {
          "default": "calendar#settings",
          "type": "string",
          "description": "Type of the collection (\"calendar#settings\")."
        },
        "etag": {
          "type": "string",
          "description": "Etag of the collection."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided."
        }
      }
    },
    "FreeBusyResponse": {
      "type": "object",
      "id": "FreeBusyResponse",
      "properties": {
        "timeMax": {
          "type": "string",
          "description": "The end of the interval.",
          "format": "date-time"
        },
        "kind": {
          "default": "calendar#freeBusy",
          "type": "string",
          "description": "Type of the resource (\"calendar#freeBusy\")."
        },
        "calendars": {
          "additionalProperties": {
            "description": "Free/busy expansions for a single calendar.",
            "$ref": "FreeBusyCalendar"
          },
          "type": "object",
          "description": "List of free/busy information for calendars."
        },
        "timeMin": {
          "type": "string",
          "description": "The start of the interval.",
          "format": "date-time"
        },
        "groups": {
          "additionalProperties": {
            "description": "List of calendars that are members of this group.",
            "$ref": "FreeBusyGroup"
          },
          "type": "object",
          "description": "Expansion of groups."
        }
      }
    },
    "Acl": {
      "type": "object",
      "id": "Acl",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided."
        },
        "items": {
          "items": {
            "$ref": "AclRule"
          },
          "type": "array",
          "description": "List of rules on the access control list."
        },
        "kind": {
          "default": "calendar#acl",
          "type": "string",
          "description": "Type of the collection (\"calendar#acl\")."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the collection."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided."
        }
      }
    },
    "CalendarNotification": {
      "type": "object",
      "id": "CalendarNotification",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of notification. Possible values are:  \n- \"eventCreation\" - Notification sent when a new event is put on the calendar. \n- \"eventChange\" - Notification sent when an event is changed. \n- \"eventCancellation\" - Notification sent when an event is cancelled. \n- \"eventResponse\" - Notification sent when an event is changed. \n- \"agenda\" - An agenda with the events of the day (sent out in the morning).",
          "annotations": {
            "required": [
              "calendar.calendarList.insert",
              "calendar.calendarList.update"
            ]
          }
        },
        "method": {
          "type": "string",
          "description": "The method used to deliver the notification. Possible values are:  \n- \"email\" - Reminders are sent via email. \n- \"sms\" - Reminders are sent via SMS. This value is read-only and is ignored on inserts and updates. SMS reminders are only available for Google Apps for Work, Education, and Government customers.",
          "annotations": {
            "required": [
              "calendar.calendarList.insert",
              "calendar.calendarList.update"
            ]
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "id": "Error",
      "properties": {
        "domain": {
          "type": "string",
          "description": "Domain, or broad category, of the error."
        },
        "reason": {
          "type": "string",
          "description": "Specific reason for the error. Some of the possible values are:  \n- \"groupTooBig\" - The group of users requested is too large for a single query. \n- \"tooManyCalendarsRequested\" - The number of calendars requested is too large for a single query. \n- \"notFound\" - The requested resource was not found. \n- \"internalError\" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list."
        }
      }
    },
    "AclRule": {
      "type": "object",
      "id": "AclRule",
      "properties": {
        "scope": {
          "annotations": {
            "required": [
              "calendar.acl.insert"
            ]
          },
          "type": "object",
          "description": "The scope of the rule.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of the scope. Possible values are:  \n- \"default\" - The public scope. This is the default value. \n- \"user\" - Limits the scope to a single user. \n- \"group\" - Limits the scope to a group. \n- \"domain\" - Limits the scope to a domain.  Note: The permissions granted to the \"default\", or public, scope apply to any user, authenticated or not.",
              "annotations": {
                "required": [
                  "calendar.acl.insert"
                ]
              }
            },
            "value": {
              "type": "string",
              "description": "The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type \"default\"."
            }
          }
        },
        "kind": {
          "default": "calendar#aclRule",
          "type": "string",
          "description": "Type of the resource (\"calendar#aclRule\")."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "role": {
          "type": "string",
          "description": "The role assigned to the scope. Possible values are:  \n- \"none\" - Provides no access. \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.",
          "annotations": {
            "required": [
              "calendar.acl.insert"
            ]
          }
        },
        "id": {
          "type": "string",
          "description": "Identifier of the ACL rule."
        }
      }
    },
    "Calendar": {
      "type": "object",
      "id": "Calendar",
      "properties": {
        "kind": {
          "default": "calendar#calendar",
          "type": "string",
          "description": "Type of the resource (\"calendar#calendar\")."
        },
        "description": {
          "type": "string",
          "description": "Description of the calendar. Optional."
        },
        "summary": {
          "type": "string",
          "description": "Title of the calendar.",
          "annotations": {
            "required": [
              "calendar.calendars.insert"
            ]
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "location": {
          "type": "string",
          "description": "Geographic location of the calendar as free-form text. Optional."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. \"Europe/Zurich\".) Optional."
        },
        "id": {
          "type": "string",
          "description": "Identifier of the calendar. To retrieve IDs call the calendarList.list() method."
        }
      }
    },
    "FreeBusyCalendar": {
      "type": "object",
      "id": "FreeBusyCalendar",
      "properties": {
        "busy": {
          "items": {
            "$ref": "TimePeriod"
          },
          "type": "array",
          "description": "List of time ranges during which this calendar should be regarded as busy."
        },
        "errors": {
          "items": {
            "$ref": "Error"
          },
          "type": "array",
          "description": "Optional error(s) (if computation for the calendar failed)."
        }
      }
    },
    "Colors": {
      "type": "object",
      "id": "Colors",
      "properties": {
        "calendar": {
          "additionalProperties": {
            "description": "A calendar color defintion.",
            "$ref": "ColorDefinition"
          },
          "type": "object",
          "description": "A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its color field. Read-only."
        },
        "updated": {
          "type": "string",
          "description": "Last modification time of the color palette (as a RFC3339 timestamp). Read-only.",
          "format": "date-time"
        },
        "event": {
          "additionalProperties": {
            "description": "An event color definition.",
            "$ref": "ColorDefinition"
          },
          "type": "object",
          "description": "A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its color field. Read-only."
        },
        "kind": {
          "default": "calendar#colors",
          "type": "string",
          "description": "Type of the resource (\"calendar#colors\")."
        }
      }
    },
    "FreeBusyRequest": {
      "type": "object",
      "id": "FreeBusyRequest",
      "properties": {
        "calendarExpansionMax": {
          "type": "integer",
          "description": "Maximal number of calendars for which FreeBusy information is to be provided. Optional.",
          "format": "int32"
        },
        "groupExpansionMax": {
          "type": "integer",
          "description": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error will be returned for a group with more members than this value.",
          "format": "int32"
        },
        "timeMax": {
          "type": "string",
          "description": "The end of the interval for the query.",
          "format": "date-time"
        },
        "items": {
          "items": {
            "$ref": "FreeBusyRequestItem"
          },
          "type": "array",
          "description": "List of calendars and/or groups to query."
        },
        "timeMin": {
          "type": "string",
          "description": "The start of the interval for the query.",
          "format": "date-time"
        },
        "timeZone": {
          "default": "UTC",
          "type": "string",
          "description": "Time zone used in the response. Optional. The default is UTC."
        }
      }
    },
    "FreeBusyRequestItem": {
      "type": "object",
      "id": "FreeBusyRequestItem",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier of a calendar or a group."
        }
      }
    },
    "Event": {
      "type": "object",
      "id": "Event",
      "properties": {
        "attachments": {
          "items": {
            "$ref": "EventAttachment"
          },
          "type": "array",
          "description": "File attachments for the event. Currently only Google Drive attachments are supported.\nIn order to modify attachments the supportsAttachments request parameter should be set to true.\nThere can be at most 25 attachments per event,"
        },
        "creator": {
          "type": "object",
          "description": "The creator of the event. Read-only.",
          "properties": {
            "self": {
              "default": "false",
              "type": "boolean",
              "description": "Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False."
            },
            "displayName": {
              "type": "string",
              "description": "The creator's name, if available."
            },
            "email": {
              "type": "string",
              "description": "The creator's email address, if available."
            },
            "id": {
              "type": "string",
              "description": "The creator's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API"
            }
          }
        },
        "organizer": {
          "type": "object",
          "description": "The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.",
          "properties": {
            "self": {
              "default": "false",
              "type": "boolean",
              "description": "Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False."
            },
            "displayName": {
              "type": "string",
              "description": "The organizer's name, if available."
            },
            "email": {
              "type": "string",
              "description": "The organizer's email address, if available. It must be a valid email address as per RFC5322."
            },
            "id": {
              "type": "string",
              "description": "The organizer's Profile ID, if available. It corresponds to theid field in the People collection of the Google+ API"
            }
          }
        },
        "summary": {
          "type": "string",
          "description": "Title of the event."
        },
        "id": {
          "type": "string",
          "description": "Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  \n- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 \n- the length of the ID must be between 5 and 1024 characters \n- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.\nIf you do not specify an ID, it will be automatically generated by the server.\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs."
        },
        "hangoutLink": {
          "type": "string",
          "description": "An absolute link to the Google+ hangout associated with this event. Read-only."
        },
        "attendees": {
          "items": {
            "$ref": "EventAttendee"
          },
          "type": "array",
          "description": "The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users."
        },
        "start": {
          "annotations": {
            "required": [
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          },
          "description": "The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.",
          "$ref": "EventDateTime"
        },
        "htmlLink": {
          "type": "string",
          "description": "An absolute link to this event in the Google Calendar Web UI. Read-only."
        },
        "recurrence": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events."
        },
        "source": {
          "type": "object",
          "description": "Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.",
          "properties": {
            "url": {
              "type": "string",
              "description": "URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS."
            },
            "title": {
              "type": "string",
              "description": "Title of the source; for example a title of a web page or an email subject."
            }
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "location": {
          "type": "string",
          "description": "Geographic location of the event as free-form text. Optional."
        },
        "recurringEventId": {
          "type": "string",
          "description": "For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable."
        },
        "gadget": {
          "type": "object",
          "description": "A gadget that extends this event.",
          "properties": {
            "preferences": {
              "additionalProperties": {
                "type": "string",
                "description": "The preference name and corresponding value."
              },
              "type": "object",
              "description": "Preferences."
            },
            "title": {
              "type": "string",
              "description": "The gadget's title."
            },
            "height": {
              "type": "integer",
              "description": "The gadget's height in pixels. The height must be an integer greater than 0. Optional.",
              "format": "int32"
            },
            "width": {
              "type": "integer",
              "description": "The gadget's width in pixels. The width must be an integer greater than 0. Optional.",
              "format": "int32"
            },
            "link": {
              "type": "string",
              "description": "The gadget's URL. The URL scheme must be HTTPS."
            },
            "type": {
              "type": "string",
              "description": "The gadget's type."
            },
            "display": {
              "type": "string",
              "description": "The gadget's display mode. Optional. Possible values are:  \n- \"icon\" - The gadget displays next to the event's title in the calendar view. \n- \"chip\" - The gadget displays when the event is clicked."
            },
            "iconLink": {
              "type": "string",
              "description": "The gadget's icon URL. The URL scheme must be HTTPS."
            }
          }
        },
        "status": {
          "type": "string",
          "description": "Status of the event. Optional. Possible values are:  \n- \"confirmed\" - The event is confirmed. This is the default status. \n- \"tentative\" - The event is tentatively confirmed. \n- \"cancelled\" - The event is cancelled."
        },
        "updated": {
          "type": "string",
          "description": "Last modification time of the event (as a RFC3339 timestamp). Read-only.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the event. Optional."
        },
        "iCalUID": {
          "type": "string",
          "description": "Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.\nNote that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.",
          "annotations": {
            "required": [
              "calendar.events.import"
            ]
          }
        },
        "extendedProperties": {
          "type": "object",
          "description": "Extended properties of the event.",
          "properties": {
            "shared": {
              "additionalProperties": {
                "type": "string",
                "description": "The name of the shared property and the corresponding value."
              },
              "type": "object",
              "description": "Properties that are shared between copies of the event on other attendees' calendars."
            },
            "private": {
              "additionalProperties": {
                "type": "string",
                "description": "The name of the private property and the corresponding value."
              },
              "type": "object",
              "description": "Properties that are private to the copy of the event that appears on this calendar."
            }
          }
        },
        "endTimeUnspecified": {
          "default": "false",
          "type": "boolean",
          "description": "Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False."
        },
        "sequence": {
          "type": "integer",
          "description": "Sequence number as per iCalendar.",
          "format": "int32"
        },
        "visibility": {
          "default": "default",
          "type": "string",
          "description": "Visibility of the event. Optional. Possible values are:  \n- \"default\" - Uses the default visibility for events on the calendar. This is the default value. \n- \"public\" - The event is public and event details are visible to all readers of the calendar. \n- \"private\" - The event is private and only event attendees may view event details. \n- \"confidential\" - The event is private. This value is provided for compatibility reasons."
        },
        "guestsCanModify": {
          "default": "false",
          "type": "boolean",
          "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False."
        },
        "end": {
          "annotations": {
            "required": [
              "calendar.events.import",
              "calendar.events.insert",
              "calendar.events.update"
            ]
          },
          "description": "The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.",
          "$ref": "EventDateTime"
        },
        "attendeesOmitted": {
          "default": "false",
          "type": "boolean",
          "description": "Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False."
        },
        "kind": {
          "default": "calendar#event",
          "type": "string",
          "description": "Type of the resource (\"calendar#event\")."
        },
        "locked": {
          "default": "false",
          "type": "boolean",
          "description": "Whether this is a locked event copy where no changes can be made to the main event fields \"summary\", \"description\", \"location\", \"start\", \"end\" or \"recurrence\". The default is False. Read-Only."
        },
        "created": {
          "type": "string",
          "description": "Creation time of the event (as a RFC3339 timestamp). Read-only.",
          "format": "date-time"
        },
        "colorId": {
          "type": "string",
          "description": "The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional."
        },
        "anyoneCanAddSelf": {
          "default": "false",
          "type": "boolean",
          "description": "Whether anyone can invite themselves to the event. Optional. The default is False."
        },
        "reminders": {
          "type": "object",
          "description": "Information about the event's reminders for the authenticated user.",
          "properties": {
            "overrides": {
              "items": {
                "$ref": "EventReminder"
              },
              "type": "array",
              "description": "If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5."
            },
            "useDefault": {
              "type": "boolean",
              "description": "Whether the default reminders of the calendar apply to the event."
            }
          }
        },
        "guestsCanSeeOtherGuests": {
          "default": "true",
          "type": "boolean",
          "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True."
        },
        "originalStartTime": {
          "description": "For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. Immutable.",
          "$ref": "EventDateTime"
        },
        "guestsCanInviteOthers": {
          "default": "true",
          "type": "boolean",
          "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is True."
        },
        "transparency": {
          "default": "opaque",
          "type": "string",
          "description": "Whether the event blocks time on the calendar. Optional. Possible values are:  \n- \"opaque\" - The event blocks time on the calendar. This is the default value. \n- \"transparent\" - The event does not block time on the calendar."
        },
        "privateCopy": {
          "default": "false",
          "type": "boolean",
          "description": "Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable. The default is False."
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "rootUrl": "https://www.googleapis.com/",
  "parameters": {
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "userIp": {
      "type": "string",
      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
      "location": "query"
    },
    "alt": {
      "description": "Data format for the response.",
      "default": "json",
      "enum": [
        "json"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "location": "query",
      "type": "string"
    }
  },
  "title": "Calendar API",
  "baseUrl": "https://www.googleapis.com/calendar/v3/",
  "version": "v3",
  "servicePath": "calendar/v3/",
  "resources": {
    "freebusy": {
      "methods": {
        "query": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns free/busy information for a set of calendars.",
          "request": {
            "$ref": "FreeBusyRequest"
          },
          "id": "calendar.freebusy.query",
          "httpMethod": "POST",
          "path": "freeBusy",
          "response": {
            "$ref": "FreeBusyResponse"
          }
        }
      }
    },
    "settings": {
      "methods": {
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Watch for changes to Settings resources.",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "format": "int32"
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            }
          },
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "supportsSubscription": true,
          "path": "users/me/settings/watch",
          "id": "calendar.settings.watch"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns all user settings for the authenticated user.",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "format": "int32"
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            }
          },
          "id": "calendar.settings.list",
          "httpMethod": "GET",
          "supportsSubscription": true,
          "path": "users/me/settings",
          "response": {
            "$ref": "Settings"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns a single user setting.",
          "parameters": {
            "setting": {
              "required": true,
              "type": "string",
              "description": "The id of the user setting.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Setting"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "setting"
          ],
          "path": "users/me/settings/{setting}",
          "id": "calendar.settings.get"
        }
      }
    },
    "calendarList": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Adds an entry to the user's calendar list.",
          "parameters": {
            "colorRgbFormat": {
              "type": "boolean",
              "description": "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.",
              "location": "query"
            }
          },
          "request": {
            "$ref": "CalendarListEntry"
          },
          "response": {
            "$ref": "CalendarListEntry"
          },
          "httpMethod": "POST",
          "path": "users/me/calendarList",
          "id": "calendar.calendarList.insert"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns an entry on the user's calendar list.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "CalendarListEntry"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "users/me/calendarList/{calendarId}",
          "id": "calendar.calendarList.get"
        },
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Watch for changes to CalendarList resources.",
          "parameters": {
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted calendar list entries in the result. Optional. The default is False.",
              "location": "query"
            },
            "minAccessRole": {
              "enumDescriptions": [
                "The user can read free/busy information.",
                "The user can read and modify events and access control lists.",
                "The user can read events that are not private.",
                "The user can read and modify events."
              ],
              "enum": [
                "freeBusyReader",
                "owner",
                "reader",
                "writer"
              ],
              "type": "string",
              "description": "The minimum access role for the user in the returned entries. Optional. The default is no restriction.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "showHidden": {
              "type": "boolean",
              "description": "Whether to show hidden entries. Optional. The default is False.",
              "location": "query"
            }
          },
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "supportsSubscription": true,
          "path": "users/me/calendarList/watch",
          "id": "calendar.calendarList.watch"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns entries on the user's calendar list.",
          "parameters": {
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.\nTo ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted calendar list entries in the result. Optional. The default is False.",
              "location": "query"
            },
            "minAccessRole": {
              "enumDescriptions": [
                "The user can read free/busy information.",
                "The user can read and modify events and access control lists.",
                "The user can read events that are not private.",
                "The user can read and modify events."
              ],
              "enum": [
                "freeBusyReader",
                "owner",
                "reader",
                "writer"
              ],
              "type": "string",
              "description": "The minimum access role for the user in the returned entries. Optional. The default is no restriction.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "showHidden": {
              "type": "boolean",
              "description": "Whether to show hidden entries. Optional. The default is False.",
              "location": "query"
            }
          },
          "id": "calendar.calendarList.list",
          "httpMethod": "GET",
          "supportsSubscription": true,
          "path": "users/me/calendarList",
          "response": {
            "$ref": "CalendarList"
          }
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an entry on the user's calendar list.",
          "parameters": {
            "colorRgbFormat": {
              "type": "boolean",
              "description": "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "CalendarListEntry"
          },
          "response": {
            "$ref": "CalendarListEntry"
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "users/me/calendarList/{calendarId}",
          "id": "calendar.calendarList.update"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an entry on the user's calendar list. This method supports patch semantics.",
          "parameters": {
            "colorRgbFormat": {
              "type": "boolean",
              "description": "Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "CalendarListEntry"
          },
          "response": {
            "$ref": "CalendarListEntry"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "users/me/calendarList/{calendarId}",
          "id": "calendar.calendarList.patch"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Deletes an entry on the user's calendar list.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "users/me/calendarList/{calendarId}",
          "id": "calendar.calendarList.delete"
        }
      }
    },
    "calendars": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Creates a secondary calendar.",
          "request": {
            "$ref": "Calendar"
          },
          "id": "calendar.calendars.insert",
          "httpMethod": "POST",
          "path": "calendars",
          "response": {
            "$ref": "Calendar"
          }
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns metadata for a calendar.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "Calendar"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}",
          "id": "calendar.calendars.get"
        },
        "clear": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/clear",
          "id": "calendar.calendars.clear"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates metadata for a calendar.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Calendar"
          },
          "response": {
            "$ref": "Calendar"
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}",
          "id": "calendar.calendars.update"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates metadata for a calendar. This method supports patch semantics.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Calendar"
          },
          "response": {
            "$ref": "Calendar"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}",
          "id": "calendar.calendars.patch"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}",
          "id": "calendar.calendars.delete"
        }
      }
    },
    "acl": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Creates an access control rule.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "AclRule"
          },
          "response": {
            "$ref": "AclRule"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/acl",
          "id": "calendar.acl.insert"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns an access control rule.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "ruleId": {
              "required": true,
              "type": "string",
              "description": "ACL rule identifier.",
              "location": "path"
            }
          },
          "response": {
            "$ref": "AclRule"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "id": "calendar.acl.get"
        },
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Watch for changes to ACL resources.",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "format": "int32"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.",
              "location": "query"
            }
          },
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "supportsSubscription": true,
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/acl/watch",
          "id": "calendar.acl.watch"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Returns the rules in the access control list for the calendar.",
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nIf the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.",
              "format": "int32"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to \"none\". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Acl"
          },
          "httpMethod": "GET",
          "supportsSubscription": true,
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/acl",
          "id": "calendar.acl.list"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an access control rule.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "ruleId": {
              "required": true,
              "type": "string",
              "description": "ACL rule identifier.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "AclRule"
          },
          "response": {
            "$ref": "AclRule"
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "id": "calendar.acl.update"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an access control rule. This method supports patch semantics.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "ruleId": {
              "required": true,
              "type": "string",
              "description": "ACL rule identifier.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "AclRule"
          },
          "response": {
            "$ref": "AclRule"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "id": "calendar.acl.patch"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Deletes an access control rule.",
          "parameters": {
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "ruleId": {
              "required": true,
              "type": "string",
              "description": "ACL rule identifier.",
              "location": "path"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "calendarId",
            "ruleId"
          ],
          "path": "calendars/{calendarId}/acl/{ruleId}",
          "id": "calendar.acl.delete"
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Stop watching resources through this channel",
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "path": "channels/stop",
          "id": "calendar.channels.stop"
        }
      }
    },
    "colors": {
      "methods": {
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns the color definitions for calendars and events.",
          "id": "calendar.colors.get",
          "httpMethod": "GET",
          "path": "colors",
          "response": {
            "$ref": "Colors"
          }
        }
      }
    },
    "events": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Creates an event.",
          "parameters": {
            "supportsAttachments": {
              "type": "boolean",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the creation of the new event. Optional. The default is False.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "request": {
            "$ref": "Event"
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/events",
          "id": "calendar.events.insert"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns an event.",
          "parameters": {
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Event identifier.",
              "location": "path"
            },
            "timeZone": {
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "path": "calendars/{calendarId}/events/{eventId}",
          "id": "calendar.events.get"
        },
        "watch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Watch for changes to Events resources.",
          "parameters": {
            "orderBy": {
              "enumDescriptions": [
                "Order by the start date/time (ascending). This is only available when querying single events (i.e. the parameter singleEvents is True)",
                "Order by last modification time (ascending)."
              ],
              "enum": [
                "startTime",
                "updated"
              ],
              "type": "string",
              "description": "The order of the events returned in the result. Optional. The default is an unspecified, stable order.",
              "location": "query"
            },
            "showHiddenInvitations": {
              "type": "boolean",
              "description": "Whether to include hidden invitations in the result. Optional. The default is False.",
              "location": "query"
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.",
              "location": "query"
            },
            "iCalUID": {
              "type": "string",
              "description": "Specifies event ID in the iCalendar format to be included in the response. Optional.",
              "location": "query"
            },
            "updatedMin": {
              "location": "query",
              "type": "string",
              "description": "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.",
              "format": "date-time"
            },
            "singleEvents": {
              "type": "boolean",
              "description": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.",
              "location": "query"
            },
            "timeMax": {
              "location": "query",
              "type": "string",
              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.",
              "format": "date-time"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.",
              "format": "int32"
            },
            "q": {
              "type": "string",
              "description": "Free text search terms to find events that match these terms in any field, except for extended properties. Optional.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "timeMin": {
              "location": "query",
              "type": "string",
              "description": "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.",
              "format": "date-time"
            },
            "timeZone": {
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar.",
              "location": "query"
            },
            "privateExtendedProperty": {
              "repeated": true,
              "type": "string",
              "description": "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "location": "query"
            },
            "sharedExtendedProperty": {
              "repeated": true,
              "type": "string",
              "description": "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "request": {
            "parameterName": "resource",
            "$ref": "Channel"
          },
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "supportsSubscription": true,
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/events/watch",
          "id": "calendar.events.watch"
        },
        "move": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Moves an event to another calendar, i.e. changes an event's organizer.",
          "parameters": {
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Event identifier.",
              "location": "path"
            },
            "destination": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier of the target calendar where the event is to be moved to.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier of the source calendar where the event currently is on.",
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the change of the event's organizer. Optional. The default is False.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "calendarId",
            "eventId",
            "destination"
          ],
          "path": "calendars/{calendarId}/events/{eventId}/move",
          "id": "calendar.events.move"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns events on the specified calendar.",
          "parameters": {
            "orderBy": {
              "enumDescriptions": [
                "Order by the start date/time (ascending). This is only available when querying single events (i.e. the parameter singleEvents is True)",
                "Order by last modification time (ascending)."
              ],
              "enum": [
                "startTime",
                "updated"
              ],
              "type": "string",
              "description": "The order of the events returned in the result. Optional. The default is an unspecified, stable order.",
              "location": "query"
            },
            "showHiddenInvitations": {
              "type": "boolean",
              "description": "Whether to include hidden invitations in the result. Optional. The default is False.",
              "location": "query"
            },
            "syncToken": {
              "type": "string",
              "description": "Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.\nThere are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.\n\nThese are: \n- iCalUID \n- orderBy \n- privateExtendedProperty \n- q \n- sharedExtendedProperty \n- timeMin \n- timeMax \n- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.\nLearn more about incremental synchronization.\nOptional. The default is to return all entries.",
              "location": "query"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.",
              "location": "query"
            },
            "iCalUID": {
              "type": "string",
              "description": "Specifies event ID in the iCalendar format to be included in the response. Optional.",
              "location": "query"
            },
            "updatedMin": {
              "location": "query",
              "type": "string",
              "description": "Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.",
              "format": "date-time"
            },
            "singleEvents": {
              "type": "boolean",
              "description": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.",
              "location": "query"
            },
            "timeMax": {
              "location": "query",
              "type": "string",
              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.",
              "format": "date-time"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.",
              "format": "int32"
            },
            "q": {
              "type": "string",
              "description": "Free text search terms to find events that match these terms in any field, except for extended properties. Optional.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "timeMin": {
              "location": "query",
              "type": "string",
              "description": "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored.",
              "format": "date-time"
            },
            "timeZone": {
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar.",
              "location": "query"
            },
            "privateExtendedProperty": {
              "repeated": true,
              "type": "string",
              "description": "Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "location": "query"
            },
            "sharedExtendedProperty": {
              "repeated": true,
              "type": "string",
              "description": "Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "Events"
          },
          "httpMethod": "GET",
          "supportsSubscription": true,
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/events",
          "id": "calendar.events.list"
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an event.",
          "parameters": {
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Event identifier.",
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.",
              "location": "query"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "supportsAttachments": {
              "type": "boolean",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "request": {
            "$ref": "Event"
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "path": "calendars/{calendarId}/events/{eventId}",
          "id": "calendar.events.update"
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Updates an event. This method supports patch semantics.",
          "parameters": {
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Event identifier.",
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.",
              "location": "query"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "supportsAttachments": {
              "type": "boolean",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "request": {
            "$ref": "Event"
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "path": "calendars/{calendarId}/events/{eventId}",
          "id": "calendar.events.patch"
        },
        "instances": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar",
            "https://www.googleapis.com/auth/calendar.readonly"
          ],
          "description": "Returns instances of the specified recurring event.",
          "parameters": {
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Recurring event identifier.",
              "location": "path"
            },
            "showDeleted": {
              "type": "boolean",
              "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.",
              "location": "query"
            },
            "timeMax": {
              "location": "query",
              "type": "string",
              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.",
              "format": "date-time"
            },
            "alwaysIncludeEmail": {
              "type": "boolean",
              "description": "Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.",
              "format": "int32"
            },
            "pageToken": {
              "type": "string",
              "description": "Token specifying which result page to return. Optional.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "timeMin": {
              "location": "query",
              "type": "string",
              "description": "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.",
              "format": "date-time"
            },
            "timeZone": {
              "type": "string",
              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar.",
              "location": "query"
            },
            "originalStart": {
              "type": "string",
              "description": "The original start time of the instance in the result. Optional.",
              "location": "query"
            },
            "maxAttendees": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "Events"
          },
          "httpMethod": "GET",
          "supportsSubscription": true,
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "path": "calendars/{calendarId}/events/{eventId}/instances",
          "id": "calendar.events.instances"
        },
        "import": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Imports an event. This operation is used to add a private copy of an existing event to a calendar.",
          "parameters": {
            "supportsAttachments": {
              "type": "boolean",
              "description": "Whether API client performing operation supports event attachments. Optional. The default is False.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            }
          },
          "request": {
            "$ref": "Event"
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "calendarId"
          ],
          "path": "calendars/{calendarId}/events/import",
          "id": "calendar.events.import"
        },
        "quickAdd": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Creates an event based on a simple text string.",
          "parameters": {
            "text": {
              "required": true,
              "type": "string",
              "description": "The text describing the event to be created.",
              "location": "query"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the creation of the event. Optional. The default is False.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "Event"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "calendarId",
            "text"
          ],
          "path": "calendars/{calendarId}/events/quickAdd",
          "id": "calendar.events.quickAdd"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/calendar"
          ],
          "description": "Deletes an event.",
          "parameters": {
            "eventId": {
              "required": true,
              "type": "string",
              "description": "Event identifier.",
              "location": "path"
            },
            "calendarId": {
              "required": true,
              "type": "string",
              "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword.",
              "location": "path"
            },
            "sendNotifications": {
              "type": "boolean",
              "description": "Whether to send notifications about the deletion of the event. Optional. The default is False.",
              "location": "query"
            }
          },
          "httpMethod": "DELETE",
          "parameterOrder": [
            "calendarId",
            "eventId"
          ],
          "path": "calendars/{calendarId}/events/{eventId}",
          "id": "calendar.events.delete"
        }
      }
    }
  },
  "revision": "20151020",
  "description": "Lets you manipulate events and other calendar data.",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/calendar.readonly": {
          "description": "View your calendars"
        },
        "https://www.googleapis.com/auth/calendar": {
          "description": "Manage your calendars"
        }
      }
    }
  },
  "kind": "discovery#restDescription",
  "name": "calendar",
  "etag": "\"ye6orv2F-1npMW3u9suM3a7C5Bo/s9Jmv1uoXeDj8o73IqlEgwaTNqE\"",
  "basePath": "/calendar/v3/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/calendar-32.png",
    "x16": "http://www.google.com/images/icons/product/calendar-16.png"
  },
  "discoveryVersion": "v1",
  "documentationLink": "https://developers.google.com/google-apps/calendar/firstapp"
}
